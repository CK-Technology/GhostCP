# {{ site.domain }} - Static Site - Generated by GhostCP
# Template: static
# Generated: {{ now() | date(format="%Y-%m-%d %H:%M:%S") }}

{% if site.ssl_enabled and site.ssl_force %}
# HTTP redirect to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name {{ site.domain }}{% if site.www_alias %} www.{{ site.domain }}{% endif %}{% for alias in site.aliases %} {{ alias }}{% endfor %};
    
    # ACME challenge location for Let's Encrypt
    location ^~ /.well-known/acme-challenge/ {
        root {{ site.document_root }};
        try_files $uri =404;
    }
    
    # Redirect all other requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}
{% endif %}

# Main static site server block
server {
    {% if site.ssl_enabled %}
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    {% else %}
    listen 80;
    listen [::]:80;
    {% endif %}
    
    server_name {{ site.domain }}{% if site.www_alias %} www.{{ site.domain }}{% endif %}{% for alias in site.aliases %} {{ alias }}{% endfor %};
    
    root {{ site.document_root }};
    index index.html index.htm;
    
    {% if site.ssl_enabled %}
    # SSL Configuration
    ssl_certificate {{ site.ssl_cert_path }};
    ssl_certificate_key {{ site.ssl_key_path }};
    
    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    {% if site.ssl_hsts %}
    
    # HSTS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    {% endif %}
    {% endif %}
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self';" always;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        text/json
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Brotli compression (if available)
    brotli on;
    brotli_comp_level 6;
    brotli_types
        text/plain
        text/css
        text/xml
        text/javascript
        text/json
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    {% if site.basic_auth_enabled and site.basic_auth_file %}
    # Basic authentication
    auth_basic "Restricted Access";
    auth_basic_user_file {{ site.basic_auth_file }};
    {% endif %}
    
    # Main location block
    location / {
        try_files $uri $uri/ $uri.html =404;
        
        {% if site.rate_limiting.location %}
        # Rate limiting
        limit_req zone={{ site.rate_limiting.zone | default(value="default") }} burst={{ site.rate_limiting.burst | default(value="10") }} nodelay;
        {% endif %}
        
        # Cache HTML files for shorter periods
        location ~* \.(html|htm)$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
        }
    }
    
    # Cache static assets aggressively
    location ~* \.(css|js|json|xml|txt)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
        log_not_found off;
        
        # Enable CORS for fonts and some assets
        add_header Access-Control-Allow-Origin "*";
    }
    
    # Images and media files
    location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|avif|bmp|tiff)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
        log_not_found off;
        
        # Serve WebP/AVIF if supported and available
        location ~* \.(jpg|jpeg|png)$ {
            add_header Vary "Accept";
            try_files $uri$avif_suffix $uri$webp_suffix $uri =404;
        }
    }
    
    # Fonts
    location ~* \.(woff|woff2|ttf|eot|otf)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*";
        access_log off;
        log_not_found off;
    }
    
    # Documents and archives
    location ~* \.(pdf|doc|docx|xls|xlsx|ppt|pptx|zip|rar|tar|gz|7z)$ {
        expires 1M;
        add_header Cache-Control "public";
        access_log off;
        log_not_found off;
    }
    
    # Video and audio files
    location ~* \.(mp4|webm|ogg|mp3|wav|flac|aac|m4a|3gp|avi|mov|wmv|flv)$ {
        expires 1M;
        add_header Cache-Control "public";
        access_log off;
        log_not_found off;
        
        # Enable range requests for media
        add_header Accept-Ranges bytes;
    }
    
    # Security: block access to sensitive files
    location ~ /\.(ht|env|git|svn|bzr|hg) {
        deny all;
        return 404;
    }
    
    # Block access to common sensitive files
    location ~* \.(bak|backup|old|orig|save|tmp|temp|~)$ {
        deny all;
        return 404;
    }
    
    # Block common exploit attempts
    location ~* (wp-config|wp-admin|xmlrpc\.php|readme\.html|license\.txt) {
        deny all;
        return 404;
    }
    
    # Favicon handling
    location = /favicon.ico {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
        log_not_found off;
    }
    
    # Robots.txt
    location = /robots.txt {
        expires 1d;
        access_log off;
        log_not_found off;
    }
    
    # Sitemap
    location ~* \.(xml)$ {
        location ~* sitemap {
            expires 1d;
            add_header Cache-Control "public";
        }
    }
    
    # Custom error pages
    error_page 404 /404.html;
    error_page 403 /403.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        internal;
        root {{ site.document_root }};
    }
    
    location = /403.html {
        internal;
        root {{ site.document_root }};
    }
    
    location = /50x.html {
        internal;
        root {{ site.document_root }};
    }
    
    # ACME challenge location for Let's Encrypt
    location ~ /.well-known/acme-challenge/ {
        allow all;
        root {{ site.document_root }};
    }
    
    {% for include_file in site.custom_includes %}
    include {{ include_file }};
    {% endfor %}
    
    {% if site.custom_config %}
    # Custom configuration
    {{ site.custom_config }}
    {% endif %}
    
    # Logging
    access_log /var/log/nginx/{{ site.domain }}.access.log;
    error_log /var/log/nginx/{{ site.domain }}.error.log warn;
}

# Map for WebP/AVIF support
map $http_accept $webp_suffix {
    default "";
    "~*webp" ".webp";
}

map $http_accept $avif_suffix {
    default "";
    "~*avif" ".avif";
}
# Multi-stage production build for GhostCP API
FROM rust:1.75-slim as builder

WORKDIR /app

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy workspace files
COPY Cargo.toml Cargo.lock ./
COPY api ./api
COPY ui ./ui

# Build the API in release mode
RUN cd api && \
    cargo build --release && \
    strip target/release/ghostcp-api

# Production runtime stage
FROM debian:bookworm-slim

# Create app user
RUN groupadd -r ghostcp && useradd -r -g ghostcp ghostcp

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    nginx \
    postgresql-client \
    restic \
    openssl \
    && rm -rf /var/lib/apt/lists/*

# Create required directories
RUN mkdir -p /var/lib/ghostcp/{data,ssl,nginx,mail,backups} \
    /var/log/ghostcp \
    /etc/ghostcp/{ssl,mail,backups} \
    && chown -R ghostcp:ghostcp /var/lib/ghostcp /var/log/ghostcp /etc/ghostcp

# Copy the binary from builder stage
COPY --from=builder /app/api/target/release/ghostcp-api /usr/local/bin/ghostcp-api

# Copy configuration templates
COPY templates /etc/ghostcp/templates
COPY config /etc/ghostcp/config

# Set permissions
RUN chmod +x /usr/local/bin/ghostcp-api

# Switch to app user
USER ghostcp

# Create health check script
COPY --chown=ghostcp:ghostcp scripts/health-check.sh /usr/local/bin/health-check.sh
RUN chmod +x /usr/local/bin/health-check.sh

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /usr/local/bin/health-check.sh

# Set environment variables
ENV RUST_LOG=info \
    ENVIRONMENT=production \
    BIND_ADDRESS=0.0.0.0:8080

# Run the application
CMD ["ghostcp-api"]